
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE TYPE "public"."session_status" AS ENUM (
    'created',
    'active',
    'done'
);

ALTER TYPE "public"."session_status" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."healer" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "content" "text" NOT NULL,
    "avatar" "text"
);

ALTER TABLE "public"."healer" OWNER TO "postgres";

ALTER TABLE "public"."healer" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."healer_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."moment" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "session_id" bigint NOT NULL,
    "uid" "uuid" NOT NULL,
    "response" "text" NOT NULL,
    "step_id" bigint NOT NULL,
    "messages" "jsonb" NOT NULL
);

ALTER TABLE "public"."moment" OWNER TO "postgres";

ALTER TABLE "public"."moment" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."moment_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE OR REPLACE VIEW "public"."restored_session" AS
 SELECT "moment"."session_id",
    "string_agg"("moment"."response", '\n'::"text") AS "responses"
   FROM "public"."moment"
  GROUP BY "moment"."session_id";

ALTER TABLE "public"."restored_session" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."service" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "content" "text"
);

ALTER TABLE "public"."service" OWNER TO "postgres";

ALTER TABLE "public"."service" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."service_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."session" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "healer_id" bigint DEFAULT '1'::bigint NOT NULL,
    "uid" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "step_id" bigint,
    "service_id" bigint DEFAULT '1'::bigint NOT NULL,
    "status" "public"."session_status" DEFAULT 'created'::"public"."session_status" NOT NULL
);

ALTER TABLE "public"."session" OWNER TO "postgres";

ALTER TABLE "public"."session" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."session_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."step" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "prior_id" bigint,
    "content" "text",
    "name" "text"
);

ALTER TABLE "public"."step" OWNER TO "postgres";

ALTER TABLE "public"."step" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."step_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."healer"
    ADD CONSTRAINT "healer_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."moment"
    ADD CONSTRAINT "moment_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."service"
    ADD CONSTRAINT "service_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."session"
    ADD CONSTRAINT "session_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."step"
    ADD CONSTRAINT "step_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."moment"
    ADD CONSTRAINT "moment_session_id_fkey" FOREIGN KEY ("session_id") REFERENCES "public"."session"("id");

ALTER TABLE ONLY "public"."moment"
    ADD CONSTRAINT "moment_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."step"("id");

ALTER TABLE ONLY "public"."moment"
    ADD CONSTRAINT "moment_uid_fkey" FOREIGN KEY ("uid") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."session"
    ADD CONSTRAINT "session_healer_id_fkey" FOREIGN KEY ("healer_id") REFERENCES "public"."healer"("id");

ALTER TABLE ONLY "public"."session"
    ADD CONSTRAINT "session_service_id_fkey" FOREIGN KEY ("service_id") REFERENCES "public"."service"("id");

ALTER TABLE ONLY "public"."session"
    ADD CONSTRAINT "session_step_id_fkey" FOREIGN KEY ("step_id") REFERENCES "public"."step"("id");

ALTER TABLE ONLY "public"."session"
    ADD CONSTRAINT "session_uid_fkey" FOREIGN KEY ("uid") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."step"
    ADD CONSTRAINT "step_prior_id_fkey" FOREIGN KEY ("prior_id") REFERENCES "public"."step"("id");

CREATE POLICY "Enable insert for authenticated" ON "public"."session" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable select for authenticated on uid" ON "public"."session" FOR SELECT TO "authenticated" USING (("auth"."uid"() = "uid"));

CREATE POLICY "Enable update for authenticated on uid" ON "public"."session" FOR UPDATE TO "authenticated" USING (("auth"."uid"() = "uid")) WITH CHECK (("auth"."uid"() = "uid"));

ALTER TABLE "public"."healer" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."moment" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."service" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."session" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."step" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."healer" TO "anon";
GRANT ALL ON TABLE "public"."healer" TO "authenticated";
GRANT ALL ON TABLE "public"."healer" TO "service_role";

GRANT ALL ON SEQUENCE "public"."healer_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."healer_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."healer_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."moment" TO "anon";
GRANT ALL ON TABLE "public"."moment" TO "authenticated";
GRANT ALL ON TABLE "public"."moment" TO "service_role";

GRANT ALL ON SEQUENCE "public"."moment_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."moment_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."moment_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."restored_session" TO "anon";
GRANT ALL ON TABLE "public"."restored_session" TO "authenticated";
GRANT ALL ON TABLE "public"."restored_session" TO "service_role";

GRANT ALL ON TABLE "public"."service" TO "anon";
GRANT ALL ON TABLE "public"."service" TO "authenticated";
GRANT ALL ON TABLE "public"."service" TO "service_role";

GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."service_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."session" TO "anon";
GRANT ALL ON TABLE "public"."session" TO "authenticated";
GRANT ALL ON TABLE "public"."session" TO "service_role";

GRANT ALL ON SEQUENCE "public"."session_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."session_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."session_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."step" TO "anon";
GRANT ALL ON TABLE "public"."step" TO "authenticated";
GRANT ALL ON TABLE "public"."step" TO "service_role";

GRANT ALL ON SEQUENCE "public"."step_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."step_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."step_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
